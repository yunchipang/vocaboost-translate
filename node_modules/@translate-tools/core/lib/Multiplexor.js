"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Multiplexor = void 0;
/**
 * Util for pack multiple requests to one
 *
 * It's just encode/decode all texts with custom separation options
 */
var Multiplexor = /** @class */function () {
  // private readonly token: Array<Array<string>> = [];
  function Multiplexor(options) {
    this.options = {
      tokenStart: '<',
      tokenEnd: '>',
      tokenClose: '/'
    };
    if (options !== undefined) {
      ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key) {
        var item = options[key];
        if (item !== undefined && item.search(/\&|\:/) !== -1) {
          throw new Error("Option ".concat(key, " has disallow characters (& or :)"));
        }
      });
      for (var key in options) {
        this.options[key] = options[key];
      }
    }
  }
  Multiplexor.prototype.encode = function (data) {
    var _this = this;
    var _a = this.options,
      _b = _a.tokenStart,
      start = _b === void 0 ? '' : _b,
      _c = _a.tokenEnd,
      end = _c === void 0 ? '' : _c,
      _d = _a.tokenClose,
      close = _d === void 0 ? '' : _d;
    return data.map(function (_a) {
      var id = _a.id,
        text = _a.text;
      return start + id + end + _this.escape(text) + start + close + id + end;
    }).join(' ');
  };
  Multiplexor.prototype.decode = function (text) {
    var _a = this.options,
      _b = _a.tokenStart,
      start = _b === void 0 ? '' : _b,
      _c = _a.tokenEnd,
      end = _c === void 0 ? '' : _c,
      _d = _a.tokenClose,
      close = _d === void 0 ? '' : _d;
    var pattern = "".concat(start, "\\s*(\\d+)\\s*").concat(end, "([\\w\\W]+?)").concat(start, "\\s*").concat(close, "\\s*\\1\\s*").concat(end);
    var matchSet = text.matchAll(new RegExp(pattern, 'gm'));
    var result = [];
    var match = matchSet.next();
    while (!match.done) {
      result.push({
        id: match.value[1],
        text: this.unescape(match.value[2])
      });
      match = matchSet.next();
    }
    return result;
  };
  Multiplexor.prototype.escape = function (text) {
    var _this = this;
    ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
      var token = _this.options[key];
      if (token.length > 0) {
        text = text.replace(new RegExp(_this.escapeRegExp(token), 'g'), "&".concat(index + 1, ":"));
      }
    });
    return text;
  };
  Multiplexor.prototype.unescape = function (text) {
    var _this = this;
    ['tokenStart', 'tokenEnd', 'tokenClose'].forEach(function (key, index) {
      var token = _this.options[key];
      if (token.length > 0) {
        text = text.replace(new RegExp("&".concat(index + 1, ":"), 'g'), token);
      }
    });
    return text;
  };
  Multiplexor.prototype.escapeRegExp = function (text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
  };
  return Multiplexor;
}();
exports.Multiplexor = Multiplexor;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
