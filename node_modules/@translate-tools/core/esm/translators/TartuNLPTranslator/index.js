var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from 'axios';
import { BaseTranslator } from '../../util/BaseTranslator';
var TartuNLPTranslator = /** @class */ (function (_super) {
    __extends(TartuNLPTranslator, _super);
    function TartuNLPTranslator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TartuNLPTranslator.isSupportedAutoFrom = function () {
        return false;
    };
    TartuNLPTranslator.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            "en", "et", "de", "lt", "lv",
            "fi", "ru", "no", "hu", "se",
        ];
        // eslint-enable
    };
    TartuNLPTranslator.prototype.getLengthLimit = function () {
        return 5000;
    };
    TartuNLPTranslator.prototype.getRequestsTimeout = function () {
        return 300;
    };
    TartuNLPTranslator.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var arrayLen = text.reduce(function (acc, text) { return acc + text.length; }, 0);
            var extra = arrayLen - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    TartuNLPTranslator.prototype.translate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.translateBatch([text], from, to).then(function (resp) { return resp[0]; })];
            });
        });
    };
    TartuNLPTranslator.prototype.translateBatch = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, axios
                        .post('https://api.tartunlp.ai/translation/v2', JSON.stringify({ text: text, src: from, tgt: to }), {
                        withCredentials: false,
                        headers: __assign({ 'Content-Type': 'application/json' }, this.options.headers),
                    })
                        .then(function (rsp) {
                        if (typeof rsp.data !== 'object' ||
                            rsp.data === null ||
                            !Array.isArray(rsp.data.result)) {
                            throw new TypeError('Unexpected data');
                        }
                        return rsp.data.result;
                    })];
            });
        });
    };
    TartuNLPTranslator.translatorName = 'TartuNLPTranslator';
    return TartuNLPTranslator;
}(BaseTranslator));
export { TartuNLPTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL1RhcnR1TkxQVHJhbnNsYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFM0Q7SUFBd0Msc0NBQWM7SUFBdEQ7O0lBaUVBLENBQUM7SUE5RGMsc0NBQW1CLEdBQWpDO1FBQ0MsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRWEsd0NBQXFCLEdBQW5DO1FBQ0MsaUJBQWlCO1FBQ2pCLGtCQUFrQjtRQUNsQixPQUFPO1lBQ04sSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7WUFDNUIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7U0FDNUIsQ0FBQztRQUNGLGdCQUFnQjtJQUNqQixDQUFDO0lBRU0sMkNBQWMsR0FBckI7UUFDQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTSwrQ0FBa0IsR0FBekI7UUFDQyxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFTSxnREFBbUIsR0FBMUIsVUFBMkIsSUFBdUI7UUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFLLE9BQUEsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQWpCLENBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEUsSUFBTSxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUMvQyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNsRCxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO0lBQ0YsQ0FBQztJQUVZLHNDQUFTLEdBQXRCLFVBQXVCLElBQVksRUFBRSxJQUFzQixFQUFFLEVBQVk7OztnQkFDeEUsc0JBQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVAsQ0FBTyxDQUFDLEVBQUM7OztLQUNyRTtJQUVZLDJDQUFjLEdBQTNCLFVBQTRCLElBQWMsRUFBRSxJQUFzQixFQUFFLEVBQVk7OztnQkFDL0Usc0JBQU8sS0FBSzt5QkFDVixJQUFJLENBQ0osd0NBQXdDLEVBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUM1Qzt3QkFDQyxlQUFlLEVBQUUsS0FBSzt3QkFDdEIsT0FBTyxhQUNOLGNBQWMsRUFBRSxrQkFBa0IsSUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3ZCO3FCQUNELENBQ0Q7eUJBQ0EsSUFBSSxDQUFDLFVBQUMsR0FBRzt3QkFDVCxJQUNDLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxRQUFROzRCQUM1QixHQUFHLENBQUMsSUFBSSxLQUFLLElBQUk7NEJBQ2pCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUMsSUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUN2Qzs0QkFDRCxNQUFNLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7eUJBQ3ZDO3dCQUVELE9BQVEsR0FBRyxDQUFDLElBQVksQ0FBQyxNQUFrQixDQUFDO29CQUM3QyxDQUFDLENBQUMsRUFBQzs7O0tBQ0o7SUEvRHNCLGlDQUFjLEdBQUcsb0JBQW9CLENBQUM7SUFnRTlELHlCQUFDO0NBakVELEFBaUVDLENBakV1QyxjQUFjLEdBaUVyRDtTQWpFWSxrQkFBa0IiLCJmaWxlIjoidHJhbnNsYXRvcnMvVGFydHVOTFBUcmFuc2xhdG9yL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgbGFuZ0NvZGUsIGxhbmdDb2RlV2l0aEF1dG8gfSBmcm9tICcuLi8uLi90eXBlcy9UcmFuc2xhdG9yJztcbmltcG9ydCB7IEJhc2VUcmFuc2xhdG9yIH0gZnJvbSAnLi4vLi4vdXRpbC9CYXNlVHJhbnNsYXRvcic7XG5cbmV4cG9ydCBjbGFzcyBUYXJ0dU5MUFRyYW5zbGF0b3IgZXh0ZW5kcyBCYXNlVHJhbnNsYXRvciB7XG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRvck5hbWUgPSAnVGFydHVOTFBUcmFuc2xhdG9yJztcblxuXHRwdWJsaWMgc3RhdGljIGlzU3VwcG9ydGVkQXV0b0Zyb20oKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMoKTogbGFuZ0NvZGVbXSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGVcblx0XHQvLyBwcmV0dGllci1pZ25vcmVcblx0XHRyZXR1cm4gW1xuXHRcdFx0XCJlblwiLCBcImV0XCIsIFwiZGVcIiwgXCJsdFwiLCBcImx2XCIsXG5cdFx0XHRcImZpXCIsIFwicnVcIiwgXCJub1wiLCBcImh1XCIsIFwic2VcIixcblx0XHRdO1xuXHRcdC8vIGVzbGludC1lbmFibGVcblx0fVxuXG5cdHB1YmxpYyBnZXRMZW5ndGhMaW1pdCgpIHtcblx0XHRyZXR1cm4gNTAwMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRSZXF1ZXN0c1RpbWVvdXQoKSB7XG5cdFx0cmV0dXJuIDMwMDtcblx0fVxuXG5cdHB1YmxpYyBjaGVja0xpbWl0RXhjZWVkaW5nKHRleHQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdGNvbnN0IGFycmF5TGVuID0gdGV4dC5yZWR1Y2UoKGFjYywgdGV4dCkgPT4gYWNjICsgdGV4dC5sZW5ndGgsIDApO1xuXHRcdFx0Y29uc3QgZXh0cmEgPSBhcnJheUxlbiAtIHRoaXMuZ2V0TGVuZ3RoTGltaXQoKTtcblx0XHRcdHJldHVybiBleHRyYSA+IDAgPyBleHRyYSA6IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGV4dHJhID0gdGV4dC5sZW5ndGggLSB0aGlzLmdldExlbmd0aExpbWl0KCk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPiAwID8gZXh0cmEgOiAwO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyB0cmFuc2xhdGUodGV4dDogc3RyaW5nLCBmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVCYXRjaChbdGV4dF0sIGZyb20sIHRvKS50aGVuKChyZXNwKSA9PiByZXNwWzBdKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyB0cmFuc2xhdGVCYXRjaCh0ZXh0OiBzdHJpbmdbXSwgZnJvbTogbGFuZ0NvZGVXaXRoQXV0bywgdG86IGxhbmdDb2RlKSB7XG5cdFx0cmV0dXJuIGF4aW9zXG5cdFx0XHQucG9zdChcblx0XHRcdFx0J2h0dHBzOi8vYXBpLnRhcnR1bmxwLmFpL3RyYW5zbGF0aW9uL3YyJyxcblx0XHRcdFx0SlNPTi5zdHJpbmdpZnkoeyB0ZXh0LCBzcmM6IGZyb20sIHRndDogdG8gfSksXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuXHRcdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdFx0XHQuLi50aGlzLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0KVxuXHRcdFx0LnRoZW4oKHJzcCkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dHlwZW9mIHJzcC5kYXRhICE9PSAnb2JqZWN0JyB8fFxuXHRcdFx0XHRcdHJzcC5kYXRhID09PSBudWxsIHx8XG5cdFx0XHRcdFx0IUFycmF5LmlzQXJyYXkoKHJzcC5kYXRhIGFzIGFueSkucmVzdWx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGRhdGEnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAocnNwLmRhdGEgYXMgYW55KS5yZXN1bHQgYXMgc3RyaW5nW107XG5cdFx0XHR9KTtcblx0fVxufVxuIl19
