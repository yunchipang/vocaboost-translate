// This code contains parts from https://github.com/plainheart/bing-translate-api/blob/e5ac48d346096681a758856bd606f147854d07cb/src/index.js
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var fetchConfig = function () { return __awaiter(void 0, void 0, void 0, function () {
    var pageText, IIGSearch, IIG, IIDSearch, IID, TokenParamsSearch, _a, key, token, lifetime;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, fetch('https://www.bing.com/translator').then(function (r) { return r.text(); })];
            case 1:
                pageText = _b.sent();
                IIGSearch = pageText.match(/IG:"([^"]+)"/);
                if (IIGSearch === null) {
                    throw new Error("Can't find IIG");
                }
                IIG = IIGSearch[1];
                IIDSearch = pageText.match(/data-iid="([^"]+)"/);
                if (IIDSearch === null) {
                    throw new Error("Can't find IID");
                }
                IID = IIDSearch[1];
                TokenParamsSearch = pageText.match(/params_RichTranslateHelper\s?=\s?([^\]]+\])/);
                if (TokenParamsSearch === null) {
                    throw new Error("Can't find token params");
                }
                _a = __read(JSON.parse(TokenParamsSearch[1]), 3), key = _a[0], token = _a[1], lifetime = _a[2];
                if (typeof key !== 'number') {
                    throw new Error('Invalid key type');
                }
                if (typeof token !== 'string') {
                    throw new Error('Invalid token type');
                }
                if (typeof lifetime !== 'number') {
                    throw new Error('Invalid token lifetime type');
                }
                return [2 /*return*/, {
                        IID: IID,
                        IIG: IIG,
                        key: key,
                        token: token,
                        lifetime: lifetime,
                    }];
        }
    });
}); };
var lastConfig = null;
function isTokenExpired() {
    if (lastConfig === null) {
        return true;
    }
    var tokenTs = lastConfig.key, tokenExpiryInterval = lastConfig.lifetime;
    return Date.now() - tokenTs > tokenExpiryInterval;
}
export var getConfig = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!isTokenExpired()) return [3 /*break*/, 2];
                return [4 /*yield*/, fetchConfig()];
            case 1:
                lastConfig = _a.sent();
                _a.label = 2;
            case 2: return [2 /*return*/, lastConfig];
        }
    });
}); };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL3Vuc3RhYmxlL0JpbmdUcmFuc2xhdG9yUHVibGljL2dldENvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0SUFBNEk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTVJLElBQU0sV0FBVyxHQUFHOzs7O29CQUNGLHFCQUFNLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLENBQUMsRUFBQTs7Z0JBQS9FLFFBQVEsR0FBRyxTQUFvRTtnQkFFL0UsU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2pELElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtvQkFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2lCQUNsQztnQkFFSyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVuQixTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7b0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztpQkFDbEM7Z0JBRUssR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFbkIsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FDdkMsNkNBQTZDLENBQzdDLENBQUM7Z0JBQ0YsSUFBSSxpQkFBaUIsS0FBSyxJQUFJLEVBQUU7b0JBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztpQkFDM0M7Z0JBRUssS0FBQSxPQUF5QixJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUEsRUFBeEQsR0FBRyxRQUFBLEVBQUUsS0FBSyxRQUFBLEVBQUUsUUFBUSxRQUFBLENBQXFDO2dCQUNoRSxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2lCQUNwQztnQkFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtvQkFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtvQkFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO2lCQUMvQztnQkFFRCxzQkFBTzt3QkFDTixHQUFHLEtBQUE7d0JBQ0gsR0FBRyxLQUFBO3dCQUNILEdBQUcsS0FBQTt3QkFDSCxLQUFLLE9BQUE7d0JBQ0wsUUFBUSxVQUFBO3FCQUNSLEVBQUM7OztLQUNGLENBQUM7QUFFRixJQUFJLFVBQVUsR0FlVixJQUFJLENBQUM7QUFFVCxTQUFTLGNBQWM7SUFDdEIsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFFTyxJQUFLLE9BQU8sR0FBb0MsVUFBVSxJQUE5QyxFQUFZLG1CQUFtQixHQUFLLFVBQVUsU0FBZixDQUFnQjtJQUNuRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsbUJBQW1CLENBQUM7QUFDbkQsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRzs7OztxQkFDcEIsY0FBYyxFQUFFLEVBQWhCLHdCQUFnQjtnQkFDTixxQkFBTSxXQUFXLEVBQUUsRUFBQTs7Z0JBQWhDLFVBQVUsR0FBRyxTQUFtQixDQUFDOztvQkFHbEMsc0JBQU8sVUFBOEMsRUFBQzs7O0tBQ3RELENBQUMiLCJmaWxlIjoidHJhbnNsYXRvcnMvdW5zdGFibGUvQmluZ1RyYW5zbGF0b3JQdWJsaWMvZ2V0Q29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIGNvbnRhaW5zIHBhcnRzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BsYWluaGVhcnQvYmluZy10cmFuc2xhdGUtYXBpL2Jsb2IvZTVhYzQ4ZDM0NjA5NjY4MWE3NTg4NTZiZDYwNmYxNDc4NTRkMDdjYi9zcmMvaW5kZXguanNcblxuY29uc3QgZmV0Y2hDb25maWcgPSBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IHBhZ2VUZXh0ID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbmcuY29tL3RyYW5zbGF0b3InKS50aGVuKChyKSA9PiByLnRleHQoKSk7XG5cblx0Y29uc3QgSUlHU2VhcmNoID0gcGFnZVRleHQubWF0Y2goL0lHOlwiKFteXCJdKylcIi8pO1xuXHRpZiAoSUlHU2VhcmNoID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBJSUdcIik7XG5cdH1cblxuXHRjb25zdCBJSUcgPSBJSUdTZWFyY2hbMV07XG5cblx0Y29uc3QgSUlEU2VhcmNoID0gcGFnZVRleHQubWF0Y2goL2RhdGEtaWlkPVwiKFteXCJdKylcIi8pO1xuXHRpZiAoSUlEU2VhcmNoID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBJSURcIik7XG5cdH1cblxuXHRjb25zdCBJSUQgPSBJSURTZWFyY2hbMV07XG5cblx0Y29uc3QgVG9rZW5QYXJhbXNTZWFyY2ggPSBwYWdlVGV4dC5tYXRjaChcblx0XHQvcGFyYW1zX1JpY2hUcmFuc2xhdGVIZWxwZXJcXHM/PVxccz8oW15cXF1dK1xcXSkvLFxuXHQpO1xuXHRpZiAoVG9rZW5QYXJhbXNTZWFyY2ggPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIHRva2VuIHBhcmFtc1wiKTtcblx0fVxuXG5cdGNvbnN0IFtrZXksIHRva2VuLCBsaWZldGltZV0gPSBKU09OLnBhcnNlKFRva2VuUGFyYW1zU2VhcmNoWzFdKTtcblx0aWYgKHR5cGVvZiBrZXkgIT09ICdudW1iZXInKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGtleSB0eXBlJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB0b2tlbiAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdG9rZW4gdHlwZScpO1xuXHR9XG5cdGlmICh0eXBlb2YgbGlmZXRpbWUgIT09ICdudW1iZXInKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRva2VuIGxpZmV0aW1lIHR5cGUnKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0SUlELFxuXHRcdElJRyxcblx0XHRrZXksXG5cdFx0dG9rZW4sXG5cdFx0bGlmZXRpbWUsXG5cdH07XG59O1xuXG5sZXQgbGFzdENvbmZpZzogbnVsbCB8IHtcblx0SUlEOiBzdHJpbmc7XG5cdElJRzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUb2tlbiB0aW1lc3RhbXBcblx0ICovXG5cdGtleTogbnVtYmVyO1xuXG5cdHRva2VuOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRva2VuIGxpZmV0aW1lIGluIHNlY1xuXHQgKi9cblx0bGlmZXRpbWU6IG51bWJlcjtcbn0gPSBudWxsO1xuXG5mdW5jdGlvbiBpc1Rva2VuRXhwaXJlZCgpIHtcblx0aWYgKGxhc3RDb25maWcgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGNvbnN0IHsga2V5OiB0b2tlblRzLCBsaWZldGltZTogdG9rZW5FeHBpcnlJbnRlcnZhbCB9ID0gbGFzdENvbmZpZztcblx0cmV0dXJuIERhdGUubm93KCkgLSB0b2tlblRzID4gdG9rZW5FeHBpcnlJbnRlcnZhbDtcbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbmZpZyA9IGFzeW5jICgpID0+IHtcblx0aWYgKGlzVG9rZW5FeHBpcmVkKCkpIHtcblx0XHRsYXN0Q29uZmlnID0gYXdhaXQgZmV0Y2hDb25maWcoKTtcblx0fVxuXG5cdHJldHVybiBsYXN0Q29uZmlnIGFzIEV4Y2x1ZGU8dHlwZW9mIGxhc3RDb25maWcsIG51bGw+O1xufTtcbiJdfQ==
