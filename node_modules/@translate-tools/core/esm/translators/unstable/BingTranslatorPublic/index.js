var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BaseTranslator } from '../../../util/BaseTranslator';
import { Multiplexor } from '../../../lib/Multiplexor';
import { fetchResponseToJson } from '../../../lib/fetchResponseToJson';
import { getConfig } from './getConfig';
/**
 * This translator is very slow for translate page, but may use to translate user input
 */
var BingTranslatorPublic = /** @class */ (function (_super) {
    __extends(BingTranslatorPublic, _super);
    function BingTranslatorPublic() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mtp = new Multiplexor({ tokenStart: 'ðŸ˜€', tokenEnd: 'ðŸ˜ƒ' });
        return _this;
    }
    BingTranslatorPublic.isSupportedAutoFrom = function () {
        return true;
    };
    BingTranslatorPublic.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            'en', 'ar', 'af', 'bg', 'cy', 'hu', 'vi', 'el', 'da', 'he',
            'id', 'is', 'es', 'it', 'ca', 'ko', 'ht', 'lv', 'lt', 'mg',
            'ms', 'mt', 'de', 'nl', 'nb', 'fa', 'pl', 'pt', 'ro', 'ru',
            'sm', 'sk', 'sl', 'sw', 'ty', 'th', 'ta', 'te', 'to', 'tr',
            'uk', 'ur', 'fj', 'fi', 'fr', 'hi', 'hr', 'cs', 'sv', 'et',
            'ja',
        ];
        // eslint-enable
    };
    BingTranslatorPublic.prototype.getLengthLimit = function () {
        return 3000;
    };
    BingTranslatorPublic.prototype.getRequestsTimeout = function () {
        return 500;
    };
    BingTranslatorPublic.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var encodedText = this.mtp.encode(text.map(function (text, id) { return ({ text: text, id: '' + id }); }));
            var extra = encodedText.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    BingTranslatorPublic.prototype.encodeObject = function (obj) {
        return Object.keys(obj)
            .map(function (key) {
            return key + '=' + encodeURIComponent(obj[key]);
        })
            .join('&');
    };
    // This fn was copy from toolKit for independentcy
    BingTranslatorPublic.prototype.findInObj = function (obj, path, notFound) {
        if (notFound === void 0) { notFound = undefined; }
        try {
            return path.reduce(function (x, y) {
                if (y in x) {
                    return x[y];
                }
                else {
                    throw Error('Not found');
                }
            }, obj);
        }
        catch (e) {
            return notFound;
        }
    };
    BingTranslatorPublic.prototype.translate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var fixedFrom, _a, IIG, IID, key, token;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fixedFrom = from === 'auto' ? 'auto-detect' : from;
                        return [4 /*yield*/, getConfig()];
                    case 1:
                        _a = _b.sent(), IIG = _a.IIG, IID = _a.IID, key = _a.key, token = _a.token;
                        return [2 /*return*/, fetch(this.wrapUrlToCorsProxy("https://www.bing.com/ttranslatev3?isVertical=1&=&IG=".concat(IIG, "&=&IID=").concat(IID)), {
                                method: 'POST',
                                headers: __assign({ 'Content-type': 'application/x-www-form-urlencoded' }, this.options.headers),
                                body: '&' +
                                    this.encodeObject({
                                        fromLang: fixedFrom,
                                        to: to,
                                        text: text,
                                        token: token,
                                        key: key,
                                    }),
                            })
                                .then(fetchResponseToJson)
                                .then(function (rsp) {
                                var text = _this.findInObj(rsp, [0, 'translations', 0, 'text']);
                                if (typeof text === 'string') {
                                    return text;
                                }
                                else {
                                    if ('StatusCode' in rsp) {
                                        throw new Error("Unknown error. Code ".concat(rsp['StatusCode']));
                                    }
                                    else {
                                        throw new Error("Unknown error");
                                    }
                                }
                            })];
                }
            });
        });
    };
    BingTranslatorPublic.prototype.translateBatch = function (text, langFrom, langTo) {
        var _this = this;
        var encodedText = this.mtp.encode(text.map(function (text, id) { return ({ text: text, id: '' + id }); }));
        return this.translate(encodedText, langFrom, langTo).then(function (rawTranslate) {
            var result = Array(text.length);
            var decodedMap = _this.mtp.decode(rawTranslate);
            decodedMap.forEach(function (_a) {
                var id = _a.id, text = _a.text;
                var index = +id;
                result[index] = text;
            });
            return result;
        });
    };
    BingTranslatorPublic.translatorName = 'BingTranslator (public)';
    return BingTranslatorPublic;
}(BaseTranslator));
export { BingTranslatorPublic };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
