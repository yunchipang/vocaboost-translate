var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BaseTranslator } from '../../util/BaseTranslator';
import { Multiplexor } from '../../lib/Multiplexor';
import { fetchResponseToJson } from '../../lib/fetchResponseToJson';
/**
 * This module did not test too ago
 */
var ReversoTranslator = /** @class */ (function (_super) {
    __extends(ReversoTranslator, _super);
    function ReversoTranslator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.langMap = {
            en: 'eng',
            ar: 'ara',
            nl: 'dut',
            he: 'heb',
            es: 'spa',
            it: 'ita',
            zh: 'chi',
            de: 'ger',
            pl: 'pol',
            pt: 'por',
            ro: 'rum',
            ru: 'rus',
            tr: 'tur',
            fr: 'fra',
            ja: 'jpn',
        };
        _this.mtp = new Multiplexor({ tokenStart: '<', tokenEnd: '>' });
        return _this;
    }
    ReversoTranslator.isSupportedAutoFrom = function () {
        return false;
    };
    ReversoTranslator.getSupportedLanguages = function () {
        // eslint-disable
        // prettier-ignore
        return [
            'en', 'ar', 'nl', 'he', 'es', 'it', 'zh', 'de', 'pl', 'pt',
            'ro', 'ru', 'tr', 'fr', 'ja',
        ];
        // eslint-enable
    };
    ReversoTranslator.prototype.getLengthLimit = function () {
        return 5000;
    };
    ReversoTranslator.prototype.getRequestsTimeout = function () {
        return 1000;
    };
    ReversoTranslator.prototype.checkLimitExceeding = function (text) {
        if (Array.isArray(text)) {
            var encodedText = this.mtp.encode(text.map(function (text, id) { return ({ text: text, id: '' + id }); }));
            var extra = encodedText.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
        else {
            var extra = text.length - this.getLengthLimit();
            return extra > 0 ? extra : 0;
        }
    };
    ReversoTranslator.prototype.translate = function (text, from, to) {
        var localFrom = this.langMap[from];
        var localTo = this.langMap[to];
        var data = {
            input: text,
            from: localFrom,
            to: localTo,
            format: 'text',
            options: {
                origin: 'reversodesktop',
                sentenceSplitter: true,
                contextResults: true,
                languageDetection: false,
            },
        };
        return fetch(this.wrapUrlToCorsProxy('https://api.reverso.net/translate/v1/translation'), {
            method: 'POST',
            headers: __assign({ 'Content-Type': 'application/json; charset=utf-8' }, this.options.headers),
            body: JSON.stringify(data),
        })
            .then(fetchResponseToJson)
            .then(function (response) {
            if (!(response instanceof Object) ||
                !(response.translation instanceof Array) ||
                response.translation.every(function (i) { return typeof i !== 'string'; })) {
                throw new Error('Unexpected response');
            }
            return response.translation.join('');
        });
    };
    ReversoTranslator.prototype.translateBatch = function (text, langFrom, langTo) {
        var _this = this;
        var encodedText = this.mtp.encode(text.map(function (text, id) { return ({ text: text, id: '' + id }); }));
        return this.translate(encodedText, langFrom, langTo).then(function (rawTranslate) {
            var result = Array(text.length);
            var decodedMap = _this.mtp.decode(rawTranslate);
            decodedMap.forEach(function (_a) {
                var id = _a.id, text = _a.text;
                var index = +id;
                result[index] = text;
            });
            return result;
        });
    };
    ReversoTranslator.translatorName = 'ReversoTranslator (public)';
    return ReversoTranslator;
}(BaseTranslator));
export { ReversoTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
