// TODO: remove it and provide utils to implement translators
/**
 * Basic abstract class for translator
 */
var BaseTranslator = /** @class */ (function () {
    function BaseTranslator(options) {
        var _this = this;
        this.options = {};
        /**
         * Util to wrap url to CORS proxy
         */
        this.wrapUrlToCorsProxy = function (url) {
            // Use as prefix
            if (typeof _this.options.corsProxy === 'string') {
                return _this.options.corsProxy + url;
            }
            // Run user defined transformation
            if (typeof _this.options.corsProxy === 'function') {
                return _this.options.corsProxy(url);
            }
            return url;
        };
        if (options !== undefined) {
            this.options = options;
        }
    }
    BaseTranslator.prototype.checkLimitExceeding = function (text) {
        var plainText = Array.isArray(text) ? text.join('') : text;
        var extra = plainText.length - this.getLengthLimit();
        return extra > 0 ? extra : 0;
    };
    BaseTranslator.translatorName = 'UnknownTranslator';
    BaseTranslator.isRequiredKey = function () { return false; };
    BaseTranslator.isSupportedAutoFrom = function () { return false; };
    BaseTranslator.getSupportedLanguages = function () { return []; };
    return BaseTranslator;
}());
export { BaseTranslator };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvQmFzZVRyYW5zbGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NBLDZEQUE2RDtBQUM3RDs7R0FFRztBQUVIO0lBZ0JDLHdCQUFZLE9BQThCO1FBQTFDLGlCQUlDO1FBTGtCLFlBQU8sR0FBRyxFQUEwQixDQUFDO1FBeUJ4RDs7V0FFRztRQUNPLHVCQUFrQixHQUFHLFVBQUMsR0FBVztZQUMxQyxnQkFBZ0I7WUFDaEIsSUFBSSxPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtnQkFDL0MsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7YUFDcEM7WUFFRCxrQ0FBa0M7WUFDbEMsSUFBSSxPQUFPLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLFVBQVUsRUFBRTtnQkFDakQsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNuQztZQUVELE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQyxDQUFDO1FBdENELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztTQUN2QjtJQUNGLENBQUM7SUFjTSw0Q0FBbUIsR0FBMUIsVUFBMkIsSUFBdUI7UUFDakQsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzdELElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZELE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQW5Dc0IsNkJBQWMsR0FBVyxtQkFBbUIsQ0FBQztJQUV0RCw0QkFBYSxHQUFHLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDO0lBRTVCLGtDQUFtQixHQUFHLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDO0lBRWxDLG9DQUFxQixHQUFHLGNBQWtCLE9BQUEsRUFBRSxFQUFGLENBQUUsQ0FBQztJQStDNUQscUJBQUM7Q0F4REQsQUF3REMsSUFBQTtTQXhEcUIsY0FBYyIsImZpbGUiOiJ1dGlsL0Jhc2VUcmFuc2xhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0VHJhbnNsYXRvckluc3RhbmNlTWVtYmVycyxcblx0bGFuZ0NvZGUsXG5cdGxhbmdDb2RlV2l0aEF1dG8sXG59IGZyb20gJy4uL3R5cGVzL1RyYW5zbGF0b3InO1xuXG5leHBvcnQgdHlwZSBDb3JzUHJveHkgPSBzdHJpbmcgfCAoKHVybDogc3RyaW5nKSA9PiBzdHJpbmcpO1xuXG5leHBvcnQgdHlwZSBUcmFuc2xhdG9yT3B0aW9uczxPIGV4dGVuZHMgUmVjb3JkPGFueSwgYW55PiA9IHt9PiA9IE8gJiB7XG5cdC8qKlxuXHQgKiBBY2Nlc3Mga2V5IGZvciByZXF1ZXN0cyB0byB0cmFuc2xhdG9yIEFQSVxuXHQgKi9cblx0YXBpS2V5Pzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBVbmlvbiB0ZXh0IGFycmF5IHRvIDEgcmVxdWVzdCAob3IgbW9yZSwgYnV0IGxlc3MgdGhhbiB1c3VhbHkgYW55d2F5KS5cblx0ICpcblx0ICogT3B0aW9uIGZvciByZWR1Y2UgdGhlIG51bWJlciBvZiByZXF1ZXN0cywgYnV0IGl0IGNhbiBtYWtlIGFydGVmYWN0cyBpbiB0cmFuc2xhdGVkIHRleHQuXG5cdCAqXG5cdCAqIFNvbWUgbW9kdWxlcyBtYXkgbm90IHN1cHBvcnQgdGhpcyBmZWF0dXJlLlxuXHQgKi9cblx0dXNlTXVsdGlwbGV4aW5nPzogYm9vbGVhbjtcblxuXHQvKipcblx0ICogQWRkaXRpb25hbCBoZWFkZXJzIGZvciByZXF1ZXN0c1xuXHQgKi9cblx0aGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cblx0LyoqXG5cdCAqIFByb3h5IHByZWZpeCBvciB0cmFuc2Zvcm0gZnVuY3Rpb24gd2hpY2ggcmV0dXJuIHVybCB3aXRoIENPUlMgcHJveHlcblx0ICpcblx0ICogQ09SUyBwcm94eSB1c2VmdWwgdG8gYXZvaWQgQ09SUyBlcnJvciBpbiBicm93c2VyIG9yIHRvIG1hc2sgc2VydmVyIHJlcXVlc3RzIGFzIGJyb3dzZXIgcmVxdWVzdHMuXG5cdCAqXG5cdCAqIEFsbCByZXF1ZXN0cyB3aWxsIHNlbmQgdGhyb3VnaCB0aGlzIHByb3h5IHNlcnZlciBhbmQgdGhpcyBzZXJ2ZXIgd2lsbCBtb2RpZnkgaGVhZGVyc1xuXHQgKi9cblx0Y29yc1Byb3h5PzogQ29yc1Byb3h5O1xufTtcblxuLy8gVE9ETzogcmVtb3ZlIGl0IGFuZCBwcm92aWRlIHV0aWxzIHRvIGltcGxlbWVudCB0cmFuc2xhdG9yc1xuLyoqXG4gKiBCYXNpYyBhYnN0cmFjdCBjbGFzcyBmb3IgdHJhbnNsYXRvclxuICovXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlVHJhbnNsYXRvcjxDIGV4dGVuZHMgUmVjb3JkPGFueSwgYW55PiA9IHt9PlxuaW1wbGVtZW50cyBUcmFuc2xhdG9ySW5zdGFuY2VNZW1iZXJzXG57XG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRvck5hbWU6IHN0cmluZyA9ICdVbmtub3duVHJhbnNsYXRvcic7XG5cblx0cHVibGljIHN0YXRpYyBpc1JlcXVpcmVkS2V5ID0gKCkgPT4gZmFsc2U7XG5cblx0cHVibGljIHN0YXRpYyBpc1N1cHBvcnRlZEF1dG9Gcm9tID0gKCkgPT4gZmFsc2U7XG5cblx0cHVibGljIHN0YXRpYyBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMgPSAoKTogbGFuZ0NvZGVbXSA9PiBbXTtcblxuXHRwdWJsaWMgYWJzdHJhY3QgZ2V0TGVuZ3RoTGltaXQoKTogbnVtYmVyO1xuXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXRSZXF1ZXN0c1RpbWVvdXQoKTogbnVtYmVyO1xuXG5cdHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zID0ge30gYXMgVHJhbnNsYXRvck9wdGlvbnM8Qz47XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBUcmFuc2xhdG9yT3B0aW9uczxDPikge1xuXHRcdGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0fVxuXHR9XG5cblx0YWJzdHJhY3QgdHJhbnNsYXRlKFxuXHRcdHRleHQ6IHN0cmluZyxcblx0XHRsYW5nRnJvbTogbGFuZ0NvZGVXaXRoQXV0byxcblx0XHRsYW5nVG86IGxhbmdDb2RlLFxuXHQpOiBQcm9taXNlPHN0cmluZz47XG5cblx0YWJzdHJhY3QgdHJhbnNsYXRlQmF0Y2goXG5cdFx0dGV4dDogc3RyaW5nW10sXG5cdFx0bGFuZ0Zyb206IGxhbmdDb2RlV2l0aEF1dG8sXG5cdFx0bGFuZ1RvOiBsYW5nQ29kZSxcblx0KTogUHJvbWlzZTxBcnJheTxzdHJpbmcgfCBudWxsPj47XG5cblx0cHVibGljIGNoZWNrTGltaXRFeGNlZWRpbmcodGV4dDogc3RyaW5nIHwgc3RyaW5nW10pIHtcblx0XHRjb25zdCBwbGFpblRleHQgPSBBcnJheS5pc0FycmF5KHRleHQpID8gdGV4dC5qb2luKCcnKSA6IHRleHQ7XG5cdFx0Y29uc3QgZXh0cmEgPSBwbGFpblRleHQubGVuZ3RoIC0gdGhpcy5nZXRMZW5ndGhMaW1pdCgpO1xuXHRcdHJldHVybiBleHRyYSA+IDAgPyBleHRyYSA6IDA7XG5cdH1cblxuXHQvKipcblx0ICogVXRpbCB0byB3cmFwIHVybCB0byBDT1JTIHByb3h5XG5cdCAqL1xuXHRwcm90ZWN0ZWQgd3JhcFVybFRvQ29yc1Byb3h5ID0gKHVybDogc3RyaW5nKSA9PiB7XG5cdFx0Ly8gVXNlIGFzIHByZWZpeFxuXHRcdGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNvcnNQcm94eSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY29yc1Byb3h5ICsgdXJsO1xuXHRcdH1cblxuXHRcdC8vIFJ1biB1c2VyIGRlZmluZWQgdHJhbnNmb3JtYXRpb25cblx0XHRpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jb3JzUHJveHkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuY29yc1Byb3h5KHVybCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblx0fTtcbn1cbiJdfQ==
