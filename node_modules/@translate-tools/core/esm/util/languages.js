// TODO: Add language codes with long format `lang-sublang`
// Unsupported: ["bn-BD","bs-Latn","yue","otq","zh-Hant","zh-Hans","tlh","sr-Cyrl","sr-Latn","fil","mww","yua","mhr","pap","ceb","mrj","udm"]
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
// Valid ISO 639-2 codes
// eslint-disable
// prettier-ignore
export var langCodes = [
    "aa", "ab", "af", "ak", "sq", "am", "ar", "an", "hy", "as",
    "av", "ae", "ay", "az", "ba", "bm", "eu", "be", "bn", "bh",
    "bi", "bo", "bs", "br", "bg", "my", "ca", "cs", "ch", "ce",
    "zh", "cu", "cv", "kw", "co", "cr", "cy", "da", "de", "dv",
    "nl", "dz", "el", "en", "eo", "et", "ee", "fo", "fa", "fj",
    "fi", "fr", "fy", "ff", "ka", "gd", "ga", "gl", "gv", "gn",
    "gu", "ht", "ha", "he", "hz", "hi", "ho", "hr", "hu", "ig",
    "is", "io", "ii", "iu", "ie", "ia", "id", "ik", "it", "jv",
    "ja", "kl", "kn", "ks", "kr", "kk", "km", "ki", "rw", "ky",
    "kv", "kg", "ko", "kj", "ku", "lo", "la", "lv", "li", "ln",
    "lt", "lb", "lu", "lg", "mk", "mh", "ml", "mi", "mr", "ms",
    "mg", "mt", "mn", "na", "nv", "nr", "nd", "ng", "ne", "nn",
    "nb", "no", "ny", "oc", "oj", "or", "om", "os", "pa", "pi",
    "pl", "pt", "ps", "qu", "rm", "ro", "rn", "ru", "sg", "sa",
    "si", "sk", "sl", "se", "sm", "sn", "sd", "so", "st", "es",
    "sc", "sr", "ss", "su", "sw", "sv", "ty", "ta", "tt", "te",
    "tg", "tl", "th", "ti", "to", "tn", "ts", "tk", "tr", "tw",
    "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "wo", "xh",
    "yi", "yo", "za", "zu"
];
// eslint-enable
var langCodesMap = null;
/**
 * Check is string are 639-2 lang code
 *
 * Values are case sensitive, if you need, you have to convert strings to lower case to check
 *
 * This function are creates object `Record<string, unknown>` with hundreds entries in RAM,
 * while first call to improve search performance. Keep in mind that this RAM never free.
 */
export var isLanguageCodeISO639v2 = function (language) {
    var e_1, _a;
    // Create map to optimize search
    if (langCodesMap === null) {
        langCodesMap = {};
        try {
            for (var langCodes_1 = __values(langCodes), langCodes_1_1 = langCodes_1.next(); !langCodes_1_1.done; langCodes_1_1 = langCodes_1.next()) {
                var lang = langCodes_1_1.value;
                langCodesMap[lang] = true;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (langCodes_1_1 && !langCodes_1_1.done && (_a = langCodes_1.return)) _a.call(langCodes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return language in langCodesMap;
};
/**
 * Receive languages array and return extracted 639-2 lang codes
 */
export var getLanguageCodesISO639v2 = function (languages) {
    return languages
        .map(function (lang) {
        // Remove suffix
        return lang.split(/[_-]/)[0];
    })
        .filter(function (language, index, languages) {
        // Remove non standard codes
        if (!isLanguageCodeISO639v2(language))
            return false;
        // Remove duplicates
        return languages.indexOf(language) === index;
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvbGFuZ3VhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCw2SUFBNkk7Ozs7Ozs7Ozs7OztBQUU3SSx3QkFBd0I7QUFDeEIsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUNsQixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUc7SUFDeEIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMxRCxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzFELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDMUQsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtDQUNiLENBQUM7QUFDWCxnQkFBZ0I7QUFFaEIsSUFBSSxZQUFZLEdBQW1DLElBQUksQ0FBQztBQUV4RDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsVUFBQyxRQUFnQjs7SUFDdEQsZ0NBQWdDO0lBQ2hDLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtRQUMxQixZQUFZLEdBQUcsRUFBRSxDQUFDOztZQUNsQixLQUFtQixJQUFBLGNBQUEsU0FBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7Z0JBQXpCLElBQU0sSUFBSSxzQkFBQTtnQkFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQzFCOzs7Ozs7Ozs7S0FDRDtJQUVELE9BQU8sUUFBUSxJQUFJLFlBQVksQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHLFVBQUMsU0FBbUI7SUFDM0QsT0FBTyxTQUFTO1NBQ2QsR0FBRyxDQUFDLFVBQUMsSUFBSTtRQUNULGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDO1NBQ0QsTUFBTSxDQUFDLFVBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxTQUFTO1FBQ2xDLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFcEQsb0JBQW9CO1FBQ3BCLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxLQUFLLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoidXRpbC9sYW5ndWFnZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBBZGQgbGFuZ3VhZ2UgY29kZXMgd2l0aCBsb25nIGZvcm1hdCBgbGFuZy1zdWJsYW5nYFxuLy8gVW5zdXBwb3J0ZWQ6IFtcImJuLUJEXCIsXCJicy1MYXRuXCIsXCJ5dWVcIixcIm90cVwiLFwiemgtSGFudFwiLFwiemgtSGFuc1wiLFwidGxoXCIsXCJzci1DeXJsXCIsXCJzci1MYXRuXCIsXCJmaWxcIixcIm13d1wiLFwieXVhXCIsXCJtaHJcIixcInBhcFwiLFwiY2ViXCIsXCJtcmpcIixcInVkbVwiXVxuXG4vLyBWYWxpZCBJU08gNjM5LTIgY29kZXNcbi8vIGVzbGludC1kaXNhYmxlXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBsYW5nQ29kZXMgPSBbXG5cdFwiYWFcIiwgXCJhYlwiLCBcImFmXCIsIFwiYWtcIiwgXCJzcVwiLCBcImFtXCIsIFwiYXJcIiwgXCJhblwiLCBcImh5XCIsIFwiYXNcIixcblx0XCJhdlwiLCBcImFlXCIsIFwiYXlcIiwgXCJhelwiLCBcImJhXCIsIFwiYm1cIiwgXCJldVwiLCBcImJlXCIsIFwiYm5cIiwgXCJiaFwiLFxuXHRcImJpXCIsIFwiYm9cIiwgXCJic1wiLCBcImJyXCIsIFwiYmdcIiwgXCJteVwiLCBcImNhXCIsIFwiY3NcIiwgXCJjaFwiLCBcImNlXCIsXG5cdFwiemhcIiwgXCJjdVwiLCBcImN2XCIsIFwia3dcIiwgXCJjb1wiLCBcImNyXCIsIFwiY3lcIiwgXCJkYVwiLCBcImRlXCIsIFwiZHZcIixcblx0XCJubFwiLCBcImR6XCIsIFwiZWxcIiwgXCJlblwiLCBcImVvXCIsIFwiZXRcIiwgXCJlZVwiLCBcImZvXCIsIFwiZmFcIiwgXCJmalwiLFxuXHRcImZpXCIsIFwiZnJcIiwgXCJmeVwiLCBcImZmXCIsIFwia2FcIiwgXCJnZFwiLCBcImdhXCIsIFwiZ2xcIiwgXCJndlwiLCBcImduXCIsXG5cdFwiZ3VcIiwgXCJodFwiLCBcImhhXCIsIFwiaGVcIiwgXCJoelwiLCBcImhpXCIsIFwiaG9cIiwgXCJoclwiLCBcImh1XCIsIFwiaWdcIixcblx0XCJpc1wiLCBcImlvXCIsIFwiaWlcIiwgXCJpdVwiLCBcImllXCIsIFwiaWFcIiwgXCJpZFwiLCBcImlrXCIsIFwiaXRcIiwgXCJqdlwiLFxuXHRcImphXCIsIFwia2xcIiwgXCJrblwiLCBcImtzXCIsIFwia3JcIiwgXCJra1wiLCBcImttXCIsIFwia2lcIiwgXCJyd1wiLCBcImt5XCIsXG5cdFwia3ZcIiwgXCJrZ1wiLCBcImtvXCIsIFwia2pcIiwgXCJrdVwiLCBcImxvXCIsIFwibGFcIiwgXCJsdlwiLCBcImxpXCIsIFwibG5cIixcblx0XCJsdFwiLCBcImxiXCIsIFwibHVcIiwgXCJsZ1wiLCBcIm1rXCIsIFwibWhcIiwgXCJtbFwiLCBcIm1pXCIsIFwibXJcIiwgXCJtc1wiLFxuXHRcIm1nXCIsIFwibXRcIiwgXCJtblwiLCBcIm5hXCIsIFwibnZcIiwgXCJuclwiLCBcIm5kXCIsIFwibmdcIiwgXCJuZVwiLCBcIm5uXCIsXG5cdFwibmJcIiwgXCJub1wiLCBcIm55XCIsIFwib2NcIiwgXCJvalwiLCBcIm9yXCIsIFwib21cIiwgXCJvc1wiLCBcInBhXCIsIFwicGlcIixcblx0XCJwbFwiLCBcInB0XCIsIFwicHNcIiwgXCJxdVwiLCBcInJtXCIsIFwicm9cIiwgXCJyblwiLCBcInJ1XCIsIFwic2dcIiwgXCJzYVwiLFxuXHRcInNpXCIsIFwic2tcIiwgXCJzbFwiLCBcInNlXCIsIFwic21cIiwgXCJzblwiLCBcInNkXCIsIFwic29cIiwgXCJzdFwiLCBcImVzXCIsXG5cdFwic2NcIiwgXCJzclwiLCBcInNzXCIsIFwic3VcIiwgXCJzd1wiLCBcInN2XCIsIFwidHlcIiwgXCJ0YVwiLCBcInR0XCIsIFwidGVcIixcblx0XCJ0Z1wiLCBcInRsXCIsIFwidGhcIiwgXCJ0aVwiLCBcInRvXCIsIFwidG5cIiwgXCJ0c1wiLCBcInRrXCIsIFwidHJcIiwgXCJ0d1wiLFxuXHRcInVnXCIsIFwidWtcIiwgXCJ1clwiLCBcInV6XCIsIFwidmVcIiwgXCJ2aVwiLCBcInZvXCIsIFwid2FcIiwgXCJ3b1wiLCBcInhoXCIsXG5cdFwieWlcIiwgXCJ5b1wiLCBcInphXCIsIFwienVcIlxuXSBhcyBjb25zdDtcbi8vIGVzbGludC1lbmFibGVcblxubGV0IGxhbmdDb2Rlc01hcDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsID0gbnVsbDtcblxuLyoqXG4gKiBDaGVjayBpcyBzdHJpbmcgYXJlIDYzOS0yIGxhbmcgY29kZVxuICpcbiAqIFZhbHVlcyBhcmUgY2FzZSBzZW5zaXRpdmUsIGlmIHlvdSBuZWVkLCB5b3UgaGF2ZSB0byBjb252ZXJ0IHN0cmluZ3MgdG8gbG93ZXIgY2FzZSB0byBjaGVja1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXJlIGNyZWF0ZXMgb2JqZWN0IGBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPmAgd2l0aCBodW5kcmVkcyBlbnRyaWVzIGluIFJBTSxcbiAqIHdoaWxlIGZpcnN0IGNhbGwgdG8gaW1wcm92ZSBzZWFyY2ggcGVyZm9ybWFuY2UuIEtlZXAgaW4gbWluZCB0aGF0IHRoaXMgUkFNIG5ldmVyIGZyZWUuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0xhbmd1YWdlQ29kZUlTTzYzOXYyID0gKGxhbmd1YWdlOiBzdHJpbmcpID0+IHtcblx0Ly8gQ3JlYXRlIG1hcCB0byBvcHRpbWl6ZSBzZWFyY2hcblx0aWYgKGxhbmdDb2Rlc01hcCA9PT0gbnVsbCkge1xuXHRcdGxhbmdDb2Rlc01hcCA9IHt9O1xuXHRcdGZvciAoY29uc3QgbGFuZyBvZiBsYW5nQ29kZXMpIHtcblx0XHRcdGxhbmdDb2Rlc01hcFtsYW5nXSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGxhbmd1YWdlIGluIGxhbmdDb2Rlc01hcDtcbn07XG5cbi8qKlxuICogUmVjZWl2ZSBsYW5ndWFnZXMgYXJyYXkgYW5kIHJldHVybiBleHRyYWN0ZWQgNjM5LTIgbGFuZyBjb2Rlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0TGFuZ3VhZ2VDb2Rlc0lTTzYzOXYyID0gKGxhbmd1YWdlczogc3RyaW5nW10pID0+IHtcblx0cmV0dXJuIGxhbmd1YWdlc1xuXHRcdC5tYXAoKGxhbmcpID0+IHtcblx0XHRcdC8vIFJlbW92ZSBzdWZmaXhcblx0XHRcdHJldHVybiBsYW5nLnNwbGl0KC9bXy1dLylbMF07XG5cdFx0fSlcblx0XHQuZmlsdGVyKChsYW5ndWFnZSwgaW5kZXgsIGxhbmd1YWdlcykgPT4ge1xuXHRcdFx0Ly8gUmVtb3ZlIG5vbiBzdGFuZGFyZCBjb2Rlc1xuXHRcdFx0aWYgKCFpc0xhbmd1YWdlQ29kZUlTTzYzOXYyKGxhbmd1YWdlKSkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0cmV0dXJuIGxhbmd1YWdlcy5pbmRleE9mKGxhbmd1YWdlKSA9PT0gaW5kZXg7XG5cdFx0fSk7XG59O1xuIl19
