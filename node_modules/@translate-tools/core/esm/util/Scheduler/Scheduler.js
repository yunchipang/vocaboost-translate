var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { QueueSemafor } from '../../lib/QueueSemafor';
/**
 * Module for scheduling and optimization of translate a text streams
 *
 * - It can union many translate requests to one
 * - You can group any requests by context
 * - It's configurable. You can set retry limit and edge for direct translate
 */
var Scheduler = /** @class */ (function () {
    function Scheduler(translator, config) {
        var _this = this;
        this.config = {
            translateRetryAttemptLimit: 2,
            isAllowDirectTranslateBadChunks: true,
            directTranslateLength: null,
            translatePoolDelay: 300,
            chunkSizeForInstantTranslate: null,
            taskBatchHandleDelay: null,
        };
        this.contextCounter = 0;
        this.taskContainersStorage = new Set();
        this.timersMap = new Map();
        /**
         * Tasks queue with items sorted by priority
         * It must be handled from end to start
         */
        this.translateQueue = [];
        /**
         * Return first item from queue and delete it from queue
         * Items is sorted by priority
         */
        this.getItemFromTranslateQueue = function () {
            var _a;
            return {
                done: _this.translateQueue.length === 0,
                value: (_a = _this.translateQueue.pop()) !== null && _a !== void 0 ? _a : null,
            };
        };
        this.workerState = false;
        this.translator = translator;
        if (config !== undefined) {
            for (var key in config) {
                this.config[key] = config[key];
            }
        }
        this.semafor = new QueueSemafor({ timeout: translator.getRequestsTimeout() });
    }
    Scheduler.prototype.translate = function (text, from, to, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, context, _c, priority, _d, directTranslateForThisRequest;
            return __generator(this, function (_e) {
                _a = options !== undefined ? options : {}, _b = _a.context, context = _b === void 0 ? '' : _b, _c = _a.priority, priority = _c === void 0 ? 0 : _c, _d = _a.directTranslate, directTranslateForThisRequest = _d === void 0 ? false : _d;
                if (this.translator.checkLimitExceeding(text) <= 0) {
                    // Direct translate
                    if (directTranslateForThisRequest ||
                        (this.config.directTranslateLength !== null &&
                            text.length >= this.config.directTranslateLength)) {
                        return [2 /*return*/, this.directTranslate(text, from, to)];
                    }
                    else {
                        return [2 /*return*/, this.makeTask({ text: text, from: from, to: to, context: context, priority: priority })];
                    }
                }
                else {
                    // Split text by words and translate
                    return [2 /*return*/, this.splitAndTranslate(text, from, to, context, priority)];
                }
                return [2 /*return*/];
            });
        });
    };
    Scheduler.prototype.directTranslate = function (text, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var free;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.semafor.take()];
                    case 1:
                        free = _a.sent();
                        return [2 /*return*/, this.translator.translate(text, from, to).finally(free)];
                }
            });
        });
    };
    Scheduler.prototype.splitAndTranslate = function (text, from, to, context, priority) {
        var e_1, _a;
        var _this = this;
        var splittedText = [];
        var charsetIndexes = [];
        var wordsBuffer = '';
        try {
            for (var _b = __values(text.matchAll(/([^\s]+)(\s*)/g)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var textMatch = _c.value;
                var newPart = textMatch[0];
                var newBuffer = wordsBuffer + newPart;
                // Add word to buffer if can
                if (this.translator.checkLimitExceeding(newBuffer) <= 0) {
                    wordsBuffer = newBuffer;
                    continue;
                }
                // Write and clear buffer if not empthy
                if (wordsBuffer.length > 0) {
                    splittedText.push(wordsBuffer);
                    wordsBuffer = '';
                }
                // Handle new part
                if (this.translator.checkLimitExceeding(newPart) <= 0) {
                    // Add to buffer
                    wordsBuffer += newPart;
                    continue;
                }
                else {
                    // Slice by chars
                    var charsBuffer = newPart;
                    while (charsBuffer.length > 0) {
                        var extraChars = this.translator.checkLimitExceeding(charsBuffer);
                        if (extraChars > 0) {
                            var offset = charsBuffer.length - extraChars;
                            // Write slice and remainder
                            splittedText.push(charsBuffer.slice(0, offset));
                            charsBuffer = charsBuffer.slice(offset);
                            charsetIndexes.push(splittedText.length - 1);
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var ctxPrefix = context.length > 0 ? context + ';' : '';
        return Promise.all(splittedText.map(function (text, index) {
            return charsetIndexes.indexOf(index) !== -1
                ? text
                : _this.makeTask({
                    text: text,
                    from: from,
                    to: to,
                    context: ctxPrefix + "text#".concat(_this.contextCounter++),
                    priority: priority,
                });
        })).then(function (translatedParts) { return translatedParts.join(''); });
    };
    Scheduler.prototype.makeTask = function (_a) {
        var _this = this;
        var text = _a.text, from = _a.from, to = _a.to, priority = _a.priority, _b = _a.context, context = _b === void 0 ? '' : _b;
        return new Promise(function (resolve, reject) {
            _this.addToTaskContainer({
                text: text,
                from: from,
                to: to,
                context: context,
                priority: priority,
                resolve: resolve,
                reject: reject,
            });
        });
    };
    Scheduler.prototype.addToTaskContainer = function (params) {
        var e_2, _a;
        var text = params.text, from = params.from, to = params.to, _b = params.attempt, attempt = _b === void 0 ? 0 : _b, _c = params.context, context = _c === void 0 ? '' : _c, priority = params.priority, resolve = params.resolve, reject = params.reject;
        // create task
        var task = {
            text: text,
            from: from,
            to: to,
            attempt: attempt,
            resolve: resolve,
            reject: reject,
        };
        var container = null;
        var _loop_1 = function (taskContainer) {
            // Skip containers with not equal parameters
            if (['from', 'to', 'context', 'priority'].some(function (key) { return params[key] !== taskContainer[key]; }))
                return "continue";
            // Lightweight check to overflow
            // NOTE: Do strict check here if you need comply a limit contract
            if (this_1.translator.getLengthLimit() >=
                taskContainer.length + task.text.length) {
                taskContainer.tasks.push(task);
                taskContainer.length += task.text.length;
                container = taskContainer;
            }
        };
        var this_1 = this;
        try {
            // try add to exists container
            for (var _d = __values(this.taskContainersStorage), _e = _d.next(); !_e.done; _e = _d.next()) {
                var taskContainer = _e.value;
                _loop_1(taskContainer);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // make container
        if (container === null) {
            var newTaskContainer = {
                context: context,
                priority: priority,
                from: from,
                to: to,
                tasks: [task],
                length: task.text.length,
            };
            this.taskContainersStorage.add(newTaskContainer);
            container = newTaskContainer;
        }
        if (this.config.chunkSizeForInstantTranslate !== null &&
            container.length >= this.config.chunkSizeForInstantTranslate) {
            this.addToTranslateQueue(container);
        }
        else {
            this.updateDelayForAddToTranslateQueue(container);
        }
    };
    Scheduler.prototype.updateDelayForAddToTranslateQueue = function (taskContainer) {
        var _this = this;
        // Flush timer
        if (this.timersMap.has(taskContainer)) {
            // Due to expectation run on one platform, timer objects will same always
            globalThis.clearTimeout(this.timersMap.get(taskContainer));
        }
        this.timersMap.set(taskContainer, globalThis.setTimeout(function () {
            _this.addToTranslateQueue(taskContainer);
        }, this.config.translatePoolDelay));
    };
    Scheduler.prototype.addToTranslateQueue = function (taskContainer) {
        // Flush timer
        if (this.timersMap.has(taskContainer)) {
            // Due to expectation run on one platform, timer objects will same always
            globalThis.clearTimeout(this.timersMap.get(taskContainer));
            this.timersMap.delete(taskContainer);
        }
        this.taskContainersStorage.delete(taskContainer);
        // Resort queue by priority each time to keep consistency
        this.translateQueue = this.translateQueue
            .concat(taskContainer)
            .sort(function (a, b) { return a.priority - b.priority; });
        if (!this.workerState) {
            this.runWorker();
        }
    };
    Scheduler.prototype.runWorker = function () {
        return __awaiter(this, void 0, void 0, function () {
            var firstIteration, _loop_2, this_2, state_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.workerState = true;
                        firstIteration = true;
                        _loop_2 = function () {
                            var workerHandleDelay, iterate, taskContainer, free, textArray;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        workerHandleDelay = this_2.config.taskBatchHandleDelay;
                                        if (!(workerHandleDelay && firstIteration)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, new Promise(function (res) { return setTimeout(res, workerHandleDelay); })];
                                    case 1:
                                        _b.sent();
                                        _b.label = 2;
                                    case 2:
                                        firstIteration = false;
                                        iterate = this_2.getItemFromTranslateQueue();
                                        // Skip when queue empty
                                        if (iterate.done || iterate.value === null)
                                            return [2 /*return*/, "break"];
                                        taskContainer = iterate.value;
                                        return [4 /*yield*/, this_2.semafor.take()];
                                    case 3:
                                        free = _b.sent();
                                        textArray = taskContainer.tasks.map(function (i) { return i.text; });
                                        return [4 /*yield*/, this_2.translator
                                                .translateBatch(textArray, taskContainer.from, taskContainer.to)
                                                .then(function (result) {
                                                for (var index in taskContainer.tasks) {
                                                    var task = taskContainer.tasks[index];
                                                    var translatedText = result[index];
                                                    if (translatedText !== null) {
                                                        task.resolve(translatedText);
                                                    }
                                                    else {
                                                        _this.taskErrorHandler(task, new Error("Translator module can't translate this"), taskContainer.context, taskContainer.priority);
                                                    }
                                                }
                                            })
                                                .catch(function (reason) {
                                                var e_3, _a;
                                                console.error(reason);
                                                try {
                                                    for (var _b = (e_3 = void 0, __values(taskContainer.tasks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                                        var task = _c.value;
                                                        _this.taskErrorHandler(task, reason, taskContainer.context, taskContainer.priority);
                                                    }
                                                }
                                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                                finally {
                                                    try {
                                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                                    }
                                                    finally { if (e_3) throw e_3.error; }
                                                }
                                            })
                                                .finally(free)];
                                    case 4:
                                        _b.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_2()];
                    case 2:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 3];
                        return [3 /*break*/, 1];
                    case 3:
                        this.workerState = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    Scheduler.prototype.taskErrorHandler = function (task, error, context, priority) {
        if (task.attempt >= this.config.translateRetryAttemptLimit) {
            if (this.config.isAllowDirectTranslateBadChunks) {
                var text = task.text, from = task.from, to = task.to, resolve = task.resolve, reject = task.reject;
                this.directTranslate(text, from, to).then(resolve, reject);
            }
            else {
                task.reject(error);
            }
        }
        else {
            this.addToTaskContainer(__assign(__assign({}, task), { attempt: task.attempt + 1, context: context, priority: priority }));
        }
    };
    return Scheduler;
}());
export { Scheduler };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
