"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.langCodes = exports.isLanguageCodeISO639v2 = exports.getLanguageCodesISO639v2 = void 0;
// TODO: Add language codes with long format `lang-sublang`
// Unsupported: ["bn-BD","bs-Latn","yue","otq","zh-Hant","zh-Hans","tlh","sr-Cyrl","sr-Latn","fil","mww","yua","mhr","pap","ceb","mrj","udm"]
var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
// Valid ISO 639-2 codes
// eslint-disable
// prettier-ignore
var langCodes = ["aa", "ab", "af", "ak", "sq", "am", "ar", "an", "hy", "as", "av", "ae", "ay", "az", "ba", "bm", "eu", "be", "bn", "bh", "bi", "bo", "bs", "br", "bg", "my", "ca", "cs", "ch", "ce", "zh", "cu", "cv", "kw", "co", "cr", "cy", "da", "de", "dv", "nl", "dz", "el", "en", "eo", "et", "ee", "fo", "fa", "fj", "fi", "fr", "fy", "ff", "ka", "gd", "ga", "gl", "gv", "gn", "gu", "ht", "ha", "he", "hz", "hi", "ho", "hr", "hu", "ig", "is", "io", "ii", "iu", "ie", "ia", "id", "ik", "it", "jv", "ja", "kl", "kn", "ks", "kr", "kk", "km", "ki", "rw", "ky", "kv", "kg", "ko", "kj", "ku", "lo", "la", "lv", "li", "ln", "lt", "lb", "lu", "lg", "mk", "mh", "ml", "mi", "mr", "ms", "mg", "mt", "mn", "na", "nv", "nr", "nd", "ng", "ne", "nn", "nb", "no", "ny", "oc", "oj", "or", "om", "os", "pa", "pi", "pl", "pt", "ps", "qu", "rm", "ro", "rn", "ru", "sg", "sa", "si", "sk", "sl", "se", "sm", "sn", "sd", "so", "st", "es", "sc", "sr", "ss", "su", "sw", "sv", "ty", "ta", "tt", "te", "tg", "tl", "th", "ti", "to", "tn", "ts", "tk", "tr", "tw", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "wo", "xh", "yi", "yo", "za", "zu"];
// eslint-enable
exports.langCodes = langCodes;
var langCodesMap = null;
/**
 * Check is string are 639-2 lang code
 *
 * Values are case sensitive, if you need, you have to convert strings to lower case to check
 *
 * This function are creates object `Record<string, unknown>` with hundreds entries in RAM,
 * while first call to improve search performance. Keep in mind that this RAM never free.
 */
var isLanguageCodeISO639v2 = function (language) {
  var e_1, _a;
  // Create map to optimize search
  if (langCodesMap === null) {
    langCodesMap = {};
    try {
      for (var langCodes_1 = __values(langCodes), langCodes_1_1 = langCodes_1.next(); !langCodes_1_1.done; langCodes_1_1 = langCodes_1.next()) {
        var lang = langCodes_1_1.value;
        langCodesMap[lang] = true;
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (langCodes_1_1 && !langCodes_1_1.done && (_a = langCodes_1.return)) _a.call(langCodes_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }
  return language in langCodesMap;
};
/**
 * Receive languages array and return extracted 639-2 lang codes
 */
exports.isLanguageCodeISO639v2 = isLanguageCodeISO639v2;
var getLanguageCodesISO639v2 = function (languages) {
  return languages.map(function (lang) {
    // Remove suffix
    return lang.split(/[_-]/)[0];
  }).filter(function (language, index, languages) {
    // Remove non standard codes
    if (!isLanguageCodeISO639v2(language)) return false;
    // Remove duplicates
    return languages.indexOf(language) === index;
  });
};
exports.getLanguageCodesISO639v2 = getLanguageCodesISO639v2;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
