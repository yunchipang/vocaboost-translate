"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeepLTranslator = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _BaseTranslator = require("../../util/BaseTranslator");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __read = void 0 && (void 0).__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var DeepLTranslator = /** @class */function (_super) {
  __extends(DeepLTranslator, _super);
  function DeepLTranslator(options) {
    var _this = _super.call(this, options) || this;
    // DeepL API Free authentication keys can be identified easily by the suffix ":fx"
    // Docs: https://www.deepl.com/docs-api/api-access/
    var isApiKeyFreeVersion = options.apiKey.endsWith(':fx');
    var apiHost = isApiKeyFreeVersion ? 'https://api-free.deepl.com' : 'https://api.deepl.com';
    _this.apiEndpoint = apiHost + '/v2/translate';
    return _this;
  }
  DeepLTranslator.getSupportedLanguages = function () {
    // eslint-disable
    // prettier-ignore
    return ['bg', 'cs', 'da', 'de', 'el', 'en', 'es', 'et', 'fi', 'fr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'nb', 'nl', 'pl', 'pt', 'ro', 'ru', 'sk', 'sl', 'sv', 'tr', 'uk', 'zh'];
    // eslint-enable
  };

  DeepLTranslator.prototype.getLengthLimit = function () {
    return 5000;
  };
  DeepLTranslator.prototype.getRequestsTimeout = function () {
    return 300;
  };
  DeepLTranslator.prototype.checkLimitExceeding = function (text) {
    if (Array.isArray(text)) {
      var arrayLen = text.reduce(function (acc, text) {
        return acc + text.length;
      }, 0);
      var extra = arrayLen - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    } else {
      var extra = text.length - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    }
  };
  DeepLTranslator.prototype.translate = function (text, from, to) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2 /*return*/, this.translateBatch([text], from, to).then(function (resp) {
          return resp[0];
        })];
      });
    });
  };
  DeepLTranslator.prototype.translateBatch = function (text, from, to) {
    return __awaiter(this, void 0, void 0, function () {
      var requestBody, stringifiedBody;
      return __generator(this, function (_a) {
        requestBody = {
          text: text,
          target_lang: to
        };
        if (from !== 'auto') {
          requestBody['source_lang'] = from;
        }
        stringifiedBody = Object.entries(requestBody).map(function (_a) {
          var _b = __read(_a, 2),
            key = _b[0],
            value = _b[1];
          if (!Array.isArray(value)) return "".concat(key, "=").concat(encodeURIComponent(value));
          // Handle array parameters
          return value.map(function (t) {
            return "".concat(key, "=") + encodeURIComponent(t);
          }).join('&');
        }).join('&');
        return [2 /*return*/, _axios.default.post(this.apiEndpoint, stringifiedBody, {
          withCredentials: false,
          headers: __assign({
            Authorization: "DeepL-Auth-Key ".concat(this.options.apiKey),
            'Content-Type': 'application/x-www-form-urlencoded'
          }, this.options.headers)
        }).then(function (rsp) {
          if (typeof rsp.data !== 'object' || rsp.data === null || !Array.isArray(rsp.data.translations)) {
            throw new TypeError('Unexpected data');
          }
          return rsp.data.translations.map(function (_a) {
            var text = _a.text;
            return text;
          });
        })];
      });
    });
  };
  DeepLTranslator.translatorName = 'DeepLTranslator';
  DeepLTranslator.isRequiredKey = function () {
    return true;
  };
  DeepLTranslator.isSupportedAutoFrom = function () {
    return true;
  };
  return DeepLTranslator;
}(_BaseTranslator.BaseTranslator);
exports.DeepLTranslator = DeepLTranslator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
